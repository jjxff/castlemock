buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: "jacoco"
    group = "com.castlemock"
    version = '1.29'

    archivesBaseName = "${it.group}-${it.name}"

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

        maven { url "http://repo1.maven.org/maven2/" }
    }

    ext.junitVersion = "4.12"
    ext.log4jVersion = "1.2.17"
    ext.guavaVersion = "17.0"
    ext.mockitoVersion = "1.10.19"
    ext.dozerVersion = "5.5.1"
    ext.springSecurityVersion = "5.0.5.RELEASE"
    ext.springFrameworkVersion = "5.0.6.RELEASE"
    ext.wsdl4jVersion = "1.6.3"
    ext.jacksonVersion = "1.9.13"
    ext.tomcatEmbedVersion = "8.5.31"
    ext.jstlVersion = "1.2"
    ext.servletApiVersion = "4.0.1"
    ext.servletJspVersion = "2.2"
    ext.swaggerVersion = "1.0.35"
    ext.ramlVersion = "1.0.22"
    ext.antlrVersion = "4.7.1"
    ext.cxfVersion = "3.2.4"
    ext.springfoxVersion = "2.8.0"
    ext.graphqlVersion = "8.0"
    ext.commonsLangVersion = "3.7"
    ext.jaxbVersion = "2.3.0"
    ext.activationVersion = "1.1.1"

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/resources'
            }
        }
    }
}

subprojects {
    dependencies {
        compile(group: 'com.google.guava', name: 'guava', version: guavaVersion)
        compile(group: 'log4j', name: 'log4j', version: log4jVersion)
        testCompile(group: 'org.mockito', name: 'mockito-all', version: mockitoVersion)
        testCompile(group: 'junit', name: 'junit', version: junitVersion) {
            exclude(group:'org.hamcrest', module:'hamcrest-core')
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

project(':code:core:expression') {
    apply plugin: 'antlr'

    description = "Castle Mock core: Expression"
    group = "com.castlemock.core"

    archivesBaseName = "${it.group}-${it.name}"

    dependencies {
        antlr group: "org.antlr", name: "antlr4", version: antlrVersion
    }

    generateGrammarSource {
        arguments += [
                "-visitor",
                "-long-messages",
                "-package", "com.castlemock.core.expression"]
    }
}

project(':code:core:basis') {
    description = "Castle Mock core: Basis"
    group = "com.castlemock.core"

    archivesBaseName = "${it.group}-${it.name}"

    dependencies {
        compile(project(":code:core:expression"))
        compile(group: 'org.apache.commons', name: 'commons-lang3', version: commonsLangVersion)

    }

}

project(':code:core:mock:rest') {
    description = "Castle Mock core: Mock REST"
    group = "com.castlemock.core"

    archivesBaseName = "${it.group}-${it.name}"

    dependencies {
        compile(project(":code:core:basis"))
    }
}

project(':code:core:mock:soap') {
    description = "Castle Mock core: Mock SOAP"
    group = "com.castlemock.core"

    archivesBaseName = "${it.group}-${it.name}"

    dependencies {
        compile(project(":code:core:basis"))
    }
}

project(':code:core:mock:graphql') {
    description = "Castle Mock core: Mock GraphQL"
    group = "com.castlemock.core"

    archivesBaseName = "${it.group}-${it.name}"

    dependencies {
        compile(project(":code:core:basis"))
    }
}

project(':code:web:basis') {
    description = "Castle Mock web: Basis"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    group = "com.castlemock.web"

    archivesBaseName = "${it.group}-${it.name}"

    bootJar.enabled = false
    jar.enabled = true

    configurations {
        providedRuntime
    }

    dependencies {
        compile(project(":code:core:basis"))
        compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web')
        providedRuntime(group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat')
        compile(group: 'org.springframework', name: 'spring-tx', version: springFrameworkVersion)
        compile(group: 'org.springframework.boot', name: 'spring-boot-starter-security')
        compile(group: 'org.springframework.security', name: 'spring-security-taglibs', version: springSecurityVersion)
        compile(group: 'io.springfox', name: 'springfox-swagger2', version: springfoxVersion)
        compile(group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxVersion)
        compile(group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion)
        compile(group: 'com.sun.xml.bind', name: 'jaxb-core', version: jaxbVersion)
        compile(group: 'com.sun.xml.bind', name: 'jaxb-impl', version: jaxbVersion)
        compile(group: 'javax.activation', name: 'activation', version: activationVersion)

        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')

        compile(group: 'net.sf.dozer', name: 'dozer', 'version': dozerVersion){
            exclude(group:'org.slf4j', module:'slf4j-log4j12')
            exclude(group:'log4j', module:'log4j')
        }
    }
}

project(':code:web:mock:rest') {
    description = "Castle Mock web: Mock REST"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    group = "com.castlemock.web"

    archivesBaseName = "${it.group}-${it.name}"

    bootJar.enabled = false
    jar.enabled = true

    dependencies {
        compile(project(":code:web:basis"))
        compile(project(":code:core:mock:rest"))
        compile(group: 'io.swagger', name: 'swagger-parser', version: swaggerVersion)
        compile(group: 'org.raml', name: 'raml-parser-2', version: ramlVersion)
        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
    }
}


project(':code:web:mock:graphql') {
    description = "Castle Mock web: Mock GraphQL"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    group = "com.castlemock.web"

    archivesBaseName = "${it.group}-${it.name}"

    bootJar.enabled = false
    jar.enabled = true


    dependencies {
        compile(project(":code:web:basis"))
        compile(project(":code:core:mock:graphql"))
        compile(group: 'com.graphql-java', name: 'graphql-java', version: graphqlVersion)
        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
    }
}

project(':code:web:mock:soap') {
    description = "Castle Mock web: Mock SOAP"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    group = "com.castlemock.web"

    archivesBaseName = "${it.group}-${it.name}"

    bootJar.enabled = false
    jar.enabled = true

    dependencies {
        compile(group: 'org.apache.cxf', name: 'cxf-rt-frontend-jaxws', version: cxfVersion)
        compile(project(":code:web:basis"))
        compile(project(":code:core:mock:soap"))
        compile(group: 'wsdl4j', name: 'wsdl4j', version: wsdl4jVersion)
        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
    }
}

project(':code:web:war') {
    description = "Castle Mock web: WAR"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'war'
    group = "com.castlemock.web"

    archivesBaseName = "${it.group}-${it.name}"

    bootWar {
        archiveName = 'castlemock.war'
        baseName = 'castlemock'
        mainClassName = "com.castlemock.war.config.Application"
        rootSpec.eachFile {
            if (it.name == 'application.properties') {
                ant.replace(file: it.file, token: "\${project.version}", value: version)
            }
        }
        from('../../../') {
            include 'LICENSE-3RD-PARTY'
            include 'LICENSE'
            include 'AUTHORS'
        }
    }


    dependencies {
        compile(project(":code:web:basis"))
        compile(project(":code:web:mock:rest"))
        compile(project(":code:web:mock:soap"))
        compile(project(":code:web:mock:graphql"))

        compile(group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', 'version': tomcatEmbedVersion)
        compile(group: 'javax.servlet', name: 'javax.servlet-api', 'version': servletApiVersion)
        compile(group: 'javax.servlet.jsp', name: 'jsp-api', 'version': servletJspVersion)
        compile(group: 'javax.servlet', name: 'jstl', 'version': jstlVersion)
        compile(group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', 'version': jacksonVersion)
        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
    }
}
